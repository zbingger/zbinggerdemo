<?php

namespace backend\controllers;

use backend\models\Oilgun;
use Yii;
use backend\models\Machine;
use yii\data\ActiveDataProvider;
use backend\models\MachineSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\Response;

/**
 * MachineController implements the CRUD actions for Machine model.
 */
class MachineController extends Controller
{
    public function actions()
    {
        if (Yii::$app->getUser()->isGuest) {
            $this->goHome();
        }
        return parent::actions(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all Machine models.
     * @return mixed
     */
    public function actionIndex()
    {
       // var_dump(yii\helpers\ArrayHelper::map(\backend\models\Oilgun::find()->where(['in','id',[2,3]])->asArray()->all(),'id','number'));
        $searchModel = new MachineSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        $dataProvider = new ActiveDataProvider([
            'query' => Machine::find(),
        ]);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionGetOils()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (Yii::$app->request->isAjax) {
            $list = Oilgun::find()->select(['id', 'number'])->where('flag=\'开启\'')->andWhere(['store_id' => Yii::$app->request->post('store_id')])->asArray()->all();
            if ($list) {
               return json_encode(['code' => 200, 'message' => ['result' => $list]]);
            }
        }
        return json_encode(['code' => 0, 'message' => ['result' => '']]);
    }

    /**
     * Displays a single Machine model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Machine model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {

        $model = new Machine();

        if ($model->load(Yii::$app->request->post()) ) {
            //var_dump(Yii::$app->request->post());exit;
            if($model->validate()){
                if(is_array($model->oilgunids)){
                    $model->oilgunids= implode(',',$model->oilgunids);
                }
                $model->save();
                return $this->redirect(['view', 'id' => $model->id]);
            }
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing Machine model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        $selected_list = \backend\models\Oilgun::find()->select(['id','number'])->where('flag=\'开启\'')->andWhere(['in','id',explode(',',$model->oilgunids)])->asArray()->all();

        //Oilgun::find()->select(['id', 'number'])->andWhere(['store_id' => Yii::$app->request->post('store_id')])->asArray()->all();
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,'selectedlist'=>$selected_list
            ]);
        }
    }

    /**
     * Deletes an existing Machine model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Machine model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Machine the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Machine::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
